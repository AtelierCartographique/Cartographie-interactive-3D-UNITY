// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class displayDataSongs : MonoBehaviour
{
	public TextAsset File;
	public GameObject coneModel;

	void Start() {

		Load (File);


		int max = NumRows ();
		float rx, ry, rz, x, y, z, xL;

		//print (max);

		for (int i = 0; i <= max; i++)
		{

			float lat = float.Parse(GetAt (i).lat);
			float lng = float.Parse(GetAt (i).lng);
			//print (GetAt (i).fichier);
			float d = 0.0f;

			float pRad = 6356752.0f;
			float EqRad = 6378137.0f;
			float R = pRad + (90 - Mathf.Abs (lat)) / 90 * (EqRad - pRad);
			float Z = (R / 100000.0f) + (d / 1000.0f / 1.9f);

			if (lng >= 0) {
				z = Z * Mathf.Cos (lat * (Mathf.PI/180)) * Mathf.Cos (-lng * (Mathf.PI/180));
				x = Z * Mathf.Cos (lat * (Mathf.PI/180)) * Mathf.Sin (-lng * (Mathf.PI/180));
				y = Z * Mathf.Sin (lat * (Mathf.PI/180));
				rx = 90.0f - lat + 180.0f;
				ry = 0.0f;
				rz = 180.0f + lng;
			}

			else {
				z = Z * Mathf.Cos (lat * (Mathf.PI/180)) * Mathf.Cos (lng * (Mathf.PI/180));
				x = Z * Mathf.Cos (lat * (Mathf.PI/180)) * Mathf.Sin (lng * (Mathf.PI/180));
				y = Z * Mathf.Sin (lat * (Mathf.PI/180));
				rx = 90.0f - lat + 180.0f;
				ry = 0.0f;
				rz = 180.0f + lng;
			}

			if (lng < 0) {
				x = -x;
				xL = x;
			}

			float rotationX = rx * (Mathf.PI)/180;
			float rotationY = ry * (Mathf.PI)/180;
			float rotationZ = rz * (Mathf.PI)/180;

			//Debug.Log(GetAt(i).lieu + " " + rotationX + " " + rotationY + " " + rotationZ);
			//Debug.Log(GetAt(i).lieu + " " + "lat:" + lat + " lng:" + lng);

			rotationX = 180.0f - lat;
			rotationY = - lng;
			rotationZ = 0.0f;

			//GameObject particleClone = Instantiate (ParticleSystem, new Vector3(x, y, z), Quaternion.identity) as ParticleSystem;
			//particleClone.transform.Rotate(new Vector3(rotationX,rotationY,rotationZ));
			//particleClone.name = "Particle_" + GetAt(i).lieu;

			GameObject coneClone = Instantiate (coneModel, new Vector3(x, y, z), Quaternion.identity);
			coneClone.transform.Rotate(new Vector3(rotationX,rotationY,rotationZ));

			//string mp3Location = GetAt (i).fichier;
			//print ("location " + mp3Location);
			//AudioClip mp3 = Resources.Load(mp3Location) as AudioClip;

			var mp3 = Resources.Load (GetAt (i).fichier) as AudioClip;

			//print ("file : " + GetAt (i).fichier + ", audioclip : " + mp3);
			AudioSource audio = coneClone.GetComponent<AudioSource>();
			audio.clip = mp3;

			audio.enabled = !audio.enabled;
			audio.enabled = !audio.enabled;

			coneClone.name = "Cone_" + GetAt(i).lieu;

		}
	}

	public class Row
	{
		public string lieu;
		public string lng;
		public string lat;
		public string description;
		public string fichier;
	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.lieu = grid[i][0];
			row.lng = grid[i][2];
			row.lat = grid[i][1];
			row.description = grid[i][3];
			row.fichier = grid[i][4];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_lieu(string find)
	{
		return rowList.Find(x => x.lieu == find);
	}
	public List<Row> FindAll_lieu(string find)
	{
		return rowList.FindAll(x => x.lieu == find);
	}
	public Row Find_lng(string find)
	{
		return rowList.Find(x => x.lng == find);
	}
	public List<Row> FindAll_lng(string find)
	{
		return rowList.FindAll(x => x.lng == find);
	}
	public Row Find_lat(string find)
	{
		return rowList.Find(x => x.lat == find);
	}
	public List<Row> FindAll_lat(string find)
	{
		return rowList.FindAll(x => x.lat == find);
	}
	public Row Find_description(string find)
	{
		return rowList.Find(x => x.description == find);
	}
	public List<Row> FindAll_description(string find)
	{
		return rowList.FindAll(x => x.description == find);
	}
	public Row Find_fichier(string find)
	{
		return rowList.Find(x => x.fichier == find);
	}
	public List<Row> FindAll_fichier(string find)
	{
		return rowList.FindAll(x => x.fichier == find);
	}

}